# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt

snippet statelessW "Create a Stateless widget" b
class ${1:name} extends StatelessWidget {
  const ${1:name}({Key key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Container(
      child: ${2:child},
    );
  }
}
endsnippet

snippet statefulW "Create a Stateful widget" b
class ${1:name} extends StatefulWidget {
  ${1:name}({Key key}) : super(key: key);

  @override
  _${1:WidgetName}State createState() => _${1:WidgetName}State();
}

class _${1:index}State extends State<${1:index}> {
  @override
  Widget build(BuildContext context) {
    return Container(
       child: ${2:child},
    );
  }
}
endsnippet

snippet build "Describes the part of the user interface represented by this widget." b
@override
Widget build(BuildContext context) {
  return ${0:};
}
endsnippet

snippet customPainter "Used for creating custom paint" b
class ${0:name}Painter extends CustomPainter {

  @override
  void paint(Canvas canvas, Size size) {
  }

  @override
  bool shouldRepaint(${0:name}Painter oldDelegate) => false;

  @override
  bool shouldRebuildSemantics(${0:name}Painter oldDelegate) => false;
}
endsnippet

snippet customClipper "Used for creating custom shapes" b
class ${0:name}Clipper extends CustomClipper<Path> {

  @override
  Path getClip(Size size) {
  }

  @override
  bool shouldReclip(CustomClipper<Path> oldClipper) => false;
}
endsnippet

snippet initS "Called when this object is inserted into the tree. The framework will call this method exactly once for each State object it creates." b
@override
void initState() { 
  super.initState();
  ${0:}
}
endsnippet

snippet dis "Called when this object is removed from the tree permanently. The framework calls this method when this State object will never build again." b
@override
void dispose() { 
  ${0:}
  super.dispose();
}
endsnippet

snippet reassemble "Called whenever the application is reassembled during debugging, for example during hot reload." b
@override
void reassemble(){
  super.reassemble();
  ${0:}
}
endsnippet

snippet didChangeD "Called when a dependency of this State object changes" b
@override
void didChangeDependencies() {
  super.didChangeDependencies();
  ${0:}
}
endsnippet

snippet didUpdateW "Called whenever the widget configuration changes." b
@override
void didUpdateWidget (${1:Type} ${2:oldWidget}) {
  super.didUpdateWidget(${2:oldWidget});
  ${0:}
}
endsnippet

snippet listViewB "Creates a scrollable, linear array of widgets that are created on demand.Providing a non-null `itemCount` improves the ability of the [ListView] to estimate the maximum scroll extent." b
ListView.builder(
  itemCount: ${1:1},
  itemBuilder: (BuildContext context, int index) {
  return ${2:};
 },
),
endsnippet

snippet listViewS "Creates a fixed-length scrollable linear array of list 'items' separated by list item 'separators'." b
ListView.separated(
  itemCount: ${1:1},
  separatorBuilder: (BuildContext context, int index) {
  return ${2:};
 },
  itemBuilder: (BuildContext context, int index) {
  return ${3:};
 },
),
endsnippet

snippet customScrollV "Creates a `ScrollView` that creates custom scroll effects using slivers. If the `primary` argument is true, the `controller` must be null." b
CustomScrollView(
  slivers: <Widget>[
  ${0:}
  ],
),
endsnippet

snippet streamBldr "Creates a new `StreamBuilder` that builds itself based on the latest snapshot of interaction with the specified `stream`" b
StreamBuilder(
  stream: ${1:stream} ,
  initialData: ${2:initialData} ,
  builder: (BuildContext context, AsyncSnapshot snapshot){
    return Container(
      child: ${3:child},
    );
  },
),
endsnippet

snippet animatedBldr "Creates an Animated Builder. The widget specified to `child` is passed to the `builder` " b
AnimatedBuilder(
  animation: ${1:animation},
  child: ${2:child},
  builder: (BuildContext context, Widget child) {
    return ${3:};
  },
),
endsnippet

snippet statefulBldr "Creates a widget that both has state and delegates its build to a callback. Useful for rebuilding specific sections of the widget tree." b
StatefulBuilder(
  builder: (BuildContext context, setState) {
    return ${0:};
  },
),
endsnippet

snippet orientationBldr "Creates a builder which allows for the orientation of the device to be specified and referenced" b
OrientationBuilder(
  builder: (BuildContext context, Orientation orientation) {
    return Container(
      child: ${3:child},
    );
  },
),
endsnippet

snippet layoutBldr "Similar to the Builder widget except that the framework calls the builder function at layout time and provides the parent widget's constraints." b
LayoutBuilder(
  builder: (BuildContext context, BoxConstraints constraints) {
    return ${0:};
  },
),
endsnippet

snippet singleChildSV "Creates a scroll view with a single child" b
SingleChildScrollView(
  controller: ${1:controller,}
  child: Column(
    ${0:}
  ),
),
endsnippet

snippet futureBldr "Creates a Future Builder. This builds itself based on the latest snapshot of interaction with a Future." b
FutureBuilder(
  future: ${1:Future},
  initialData: ${2:InitialData},
  builder: (BuildContext context, AsyncSnapshot snapshot) {
    return ${3:};
  },
),
endsnippet

snippet nosm "This method is invoked when a non-existent method or property is accessed." b
@override
dynamic noSuchMethod(Invocation invocation) {
  ${1:}
}
endsnippet

snippet inheritedW "Class used to propagate information down the widget tree" b
class ${1:Name} extends InheritedWidget {
  ${1:Name}({Key key, this.child}) : super(key: key, child: child);

  final Widget child;

  static ${1:Name} of(BuildContext context) {
    return context.dependOnInheritedWidgetOfExactType<${1:Name}>();
  }

  @override
  bool updateShouldNotify(${1:Name} oldWidget) {
    return ${2:true};
  }
}
endsnippet

snippet mounted "Whether this State object is currently in a tree." b
@override
bool get mounted {
  ${0:}
}
endsnippet

snippet snk "A Sink is the input of a stream." b
Sink<${1:type}> get ${2:name} => _${2:name}Controller.sink;
final _${2:name}Controller = StreamController<${1:type}>();
endsnippet

snippet strm "A source of asynchronous data events. A stream can be of any data type <T>" b
Stream<${1:type}> get ${2:name} => _${2:name}Controller.stream;
final _${2:name}Controller = StreamController<${1:type}>();
endsnippet

snippet subj "A BehaviorSubject is also a broadcast StreamController which returns an Observable rather than a Stream." b
Stream<${1:type}> get ${2:name} => _${2:name}Subject.stream;
final _${2:name}Subject = BehaviorSubject<${1:type}>();
endsnippet

snippet toStr "Returns a string representation of this object." b
@override
String toString() {
return ${1:toString};
 }
endsnippet

snippet debugP "Prints a message to the console, which you can access using the flutter tool's `logs` command (flutter logs)." b
debugPrint(${1:statement});
endsnippet

snippet importM "Import flutter material package" b
import 'package:flutter/material.dart';
endsnippet

snippet importC "Import Flutter Cupertino package" b
import 'package:flutter/cupertino.dart';
endsnippet

snippet importFT "Import flutter_test package" b
import 'package:flutter_test/flutter_test.dart';
endsnippet

snippet mateapp "Create a MaterialApp" b
import 'package:flutter/material.dart';
 
void main() => runApp(MyApp());
 
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Material App',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Material App Bar'),
        ),
        body: Center(
          child: Container(
            child: Text('Hello World'),
          ),
        ),
      ),
    );
  }
}
endsnippet

snippet cupeapp "Cupertino App" b
import 'package:flutter/cupertino.dart';
 
void main() => runApp(MyApp());
 
class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return CupertinoApp(
      title: 'Cupertino App',
      home: CupertinoPageScaffold(
        navigationBar: CupertinoNavigationBar(
          middle: Text('Cupertino App Bar'),
        ),
        child: Center(
          child: Container(
            child: Text('Hello World'),
          ),
        ),
      ),
    );
  }
}
endsnippet

snippet tweenAnimationBuilder "Widget builder that animates a property of a Widget to a target value whenever the target value changes." b
TweenAnimationBuilder(
    duration: ${1:const Duration(),}
    tween: ${2:Tween(),}
    builder: (BuildContext context, ${3:dynamic} value, Widget child) {
       return ${4:Container();}
     },
 ),  
endsnippet

snippet valueListenableBuilder "Given a ValueListenable<T> and a builder which builds widgets from concrete values of T, this class will automatically register itself as a listener of the ValueListenable and call the builder with updated values when the value changes." b
ValueListenableBuilder(
    valueListenable: ${1: null},
    builder: (BuildContext context, ${2:dynamic} value, Widget child) {
       return ${3: Container();}
    },
 ),
endsnippet

snippet f-test "Create a test function" b
test(
   "${1:test description}",
   () {},
);
endsnippet

snippet widgetTest "Create a testWidgets function" b
testWidgets(
   "${1:test description}",
   (WidgetTester tester) async {},
);
endsnippet


